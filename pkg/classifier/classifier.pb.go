// Code generated by protoc-gen-go. DO NOT EDIT.
// source: classifier.proto

package classifier

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Image struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_db11a76673af5bf6, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Breed struct {
	Name                 []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Breed) Reset()         { *m = Breed{} }
func (m *Breed) String() string { return proto.CompactTextString(m) }
func (*Breed) ProtoMessage()    {}
func (*Breed) Descriptor() ([]byte, []int) {
	return fileDescriptor_db11a76673af5bf6, []int{1}
}

func (m *Breed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Breed.Unmarshal(m, b)
}
func (m *Breed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Breed.Marshal(b, m, deterministic)
}
func (m *Breed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Breed.Merge(m, src)
}
func (m *Breed) XXX_Size() int {
	return xxx_messageInfo_Breed.Size(m)
}
func (m *Breed) XXX_DiscardUnknown() {
	xxx_messageInfo_Breed.DiscardUnknown(m)
}

var xxx_messageInfo_Breed proto.InternalMessageInfo

func (m *Breed) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*Breed)(nil), "Breed")
}

func init() { proto.RegisterFile("classifier.proto", fileDescriptor_db11a76673af5bf6) }

var fileDescriptor_db11a76673af5bf6 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0x49, 0x2c,
	0x2e, 0xce, 0x4c, 0xcb, 0x4c, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe6, 0x62,
	0xf5, 0xcc, 0x4d, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x29, 0x48, 0x2c, 0xc9, 0x90, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x41, 0x92, 0x4e, 0x45, 0xa9, 0xa9, 0x29, 0x20, 0xc9, 0xbc,
	0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x66, 0x90, 0x24, 0x88, 0x6d, 0x64, 0xc3, 0x25, 0x06, 0x96,
	0x74, 0x86, 0x1b, 0x19, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0xa4, 0xc4, 0xc5, 0x17, 0x94,
	0x9a, 0x9c, 0x9f, 0x9e, 0x97, 0x59, 0x95, 0x0a, 0xd1, 0xcf, 0xa6, 0x07, 0xb6, 0x44, 0x8a, 0x4d,
	0x0f, 0xcc, 0x57, 0x62, 0x48, 0x62, 0x03, 0x5b, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0xd9, 0x16, 0xe1, 0x92, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BreedClassifierServiceClient is the client API for BreedClassifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BreedClassifierServiceClient interface {
	RecognizeBreed(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Breed, error)
}

type breedClassifierServiceClient struct {
	cc *grpc.ClientConn
}

func NewBreedClassifierServiceClient(cc *grpc.ClientConn) BreedClassifierServiceClient {
	return &breedClassifierServiceClient{cc}
}

func (c *breedClassifierServiceClient) RecognizeBreed(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Breed, error) {
	out := new(Breed)
	err := c.cc.Invoke(ctx, "/BreedClassifierService/RecognizeBreed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BreedClassifierServiceServer is the server API for BreedClassifierService service.
type BreedClassifierServiceServer interface {
	RecognizeBreed(context.Context, *Image) (*Breed, error)
}

// UnimplementedBreedClassifierServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBreedClassifierServiceServer struct {
}

func (*UnimplementedBreedClassifierServiceServer) RecognizeBreed(ctx context.Context, req *Image) (*Breed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeBreed not implemented")
}

func RegisterBreedClassifierServiceServer(s *grpc.Server, srv BreedClassifierServiceServer) {
	s.RegisterService(&_BreedClassifierService_serviceDesc, srv)
}

func _BreedClassifierService_RecognizeBreed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreedClassifierServiceServer).RecognizeBreed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BreedClassifierService/RecognizeBreed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreedClassifierServiceServer).RecognizeBreed(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _BreedClassifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BreedClassifierService",
	HandlerType: (*BreedClassifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeBreed",
			Handler:    _BreedClassifierService_RecognizeBreed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classifier.proto",
}
